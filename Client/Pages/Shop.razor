@page "/Shop";
@*@attribute [Authorize(Roles = "Iron Man")]*@
@using System.Net.Sockets
@using BookShop.Client.Data
@using BookShop.Client.Models

<style>
    .card {
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    max-width: 300px;
    margin: auto;
    text-align: center;
    font-family: arial;
}

.price {
    color: grey;
    font-size: 22px;
}

.card button {
    border: none;
    outline: 0;
    padding: 12px;
    color: white;
    background-color: #000;
    text-align: center;
    cursor: pointer;
    width: 100%;
    font-size: 18px;
}

    .card button:hover {
        opacity: 0.7;
    }

.grid-container {
    display: grid;
    column-gap: 50px;
    gap: 50px;
    grid-template-columns: auto auto auto;
    padding: 10px;
}
</style>


<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudGrid Spacing="5" Justify="Justify.FlexStart">
            <MudItem>
                <MudSelect T="string" ValueChanged="value => Sort(value)" Label="Order by" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("All")" />
                    <MudSelectItem Value="@("By Name")"/>
                    <MudSelectItem Value="@("By Author")"/>
                    <MudSelectItem Value="@("By year posted")"/>
                    <MudSelectItem Value="@("By Tag")"/>
                </MudSelect>
            </MudItem>
            @if (Orderby == "By Tag")
            {
                <MudItem>
                    <MudSelect T="string" Label="Order by" AnchorOrigin="Origin.BottomCenter" ValueChanged="value => SortByTag(value)">
                        @foreach (string tag in @tags)
                        {
                            <MudSelectItem Value="@tag"/>
                        }
                    </MudSelect>
                </MudItem>
            }
            <MudItem>
                <MudTextField @bind-Value="serchstring" @onkeydown="Search" Label="Search" Variant="Variant.Outlined" />
            </MudItem>
        </MudGrid>

        <MudGrid Spacing="5" Justify="Justify.Center">
            @foreach (Book i in _books)
            {
                <MudItem>
                    <MudCard>
                        <MudCardMedia Image="book.png" Height="200"/>
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@i.Name</MudText>
                            <MudText Typo="Typo.body2">@i.Author @i.YearPosted</MudText>
                            <MudText Typo="Typo.body2">Описание</MudText>
                            @foreach (string tag in i.Tags.Split(","))
                            {
                                <MudChip Color="Color.Primary" @onclick="() => SortByTag(tag)">@tag</MudChip>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => RemoveBook(i.Name)">Buy</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Details</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        <img src="https://i.gifer.com/origin/51/51f1ea94effbb251598e67e8522e58f5.gif" />
    </NotAuthorized>
</AuthorizeView>

@code
{
    List<Book> _books = new List<Book>();
    List<Book> _booksInitial = new List<Book>();
    List<string> tags = new List<string>();
    string Orderby = string.Empty;

    void RemoveBook(string name) => _books = _books.Where(x => x.Name != name).ToList();

    public string serchstring = "";

    protected override async Task OnInitializedAsync()
    {
     //   List<Book> Books = new List<Book>()
     //{
     //   new Book("The Lord of the Rings", "J.R.R. Tolkien", "1954",  "Fantasy"),
     //   new Book("Harry Potter and the Philosopher's Stone", "J.K. Rowling", "1997", "Fantasy,Novel"),
     //   new Book("The Hobbit", "J.R.R. Tolkien", "1937", "Fantasy,Novel"),
     //   new Book("The Hitchhiker's Guide to the Galaxy", "Douglas Adams", "1979" , "Comedy,Science fiction"),
     //   new Book("The Lion, the Witch and the Wardrobe", "C.S. Lewis", "1950",  "Fantasy,Novel"),
     //   new Book("The Da Vinci Code", "Dan Brown", "2003", "Thriller,Mystery"),
     //   new Book("The Little Prince", "Antoine de Saint-Exupéry", "1943", "Fantasy,Fable"),
     //   new Book("The Alchemist", "Paulo Coelho", "1988",  "Fantasy,Novel"),
     //   new Book("The Catcher in the Rye", "J.D. Salinger", "1951",  "Novel"),
     //   new Book("The Kite Runner", "Khaled Hosseini", "2003", "Novel"),
     //    new Book("Sherlock Holmes", "Arthur Conan Doyle", "1892", "Detective,Novel"),
     //    new Book("The Adventures of Tom Sawyer", "Mark Twain", "1876", "Novel"),
     //    new Book("1984", "George Orwell", "1949", "Dystopian"),
     //    new Book("The Hitchhiker's Guide to the Galaxy", "Douglas Adams", "1979" , "Comedy,Science fiction"),
     //    new Book("Brave New World", "Aldous Huxley", "1932", "Dystopian"),
     //    new Book("Fahrenheit 451", "Ray Bradbury", "1953", "Dystopian"),
     //    new Book("The Handmaid's Tale", "Margaret Atwood", "1985", "Dystopian"),
     //    new Book("The Hunger Games", "Suzanne Collins", "2008", "Dystopian"),
     //    new Book("The Time Machine", "H.G. Wells", "1895", "Science fiction"),
     //    new Book("The War of the Worlds", "H.G. Wells", "1898", "Science fiction"),
     //    new Book("Sherlock Holmes", "Arthur Conan Doyle", "1892", "Detective,Novel"),
     //    new Book("The Adventures of Tom Sawyer", "Mark Twain", "1876", "Novel"),
     //    new Book("The Time Machine", "H.G. Wells", "1895", "Science fiction"),
     //    new Book("The War of the Worlds", "H.G. Wells", "1898", "Science fiction"),
     //};

     //   foreach (Book book in Books)
     //   {
     //       await BookService.Add(book);
     //   }
        
        _books = await BookService.GetAll();
        _booksInitial = _books;
        tags = _books.SelectMany(x => x.Tags.Split(",")).Distinct().ToList();

    }

    void Sort(string by)
    {
        Orderby = by;
        _books = by switch
        {
            "By Name" => _books.OrderBy(x => x.Name).ToList(),
            "By Author" => _books.OrderBy(x => x.Author).ToList(),
            "By year posted" => _books.OrderBy(x => x.YearPosted).ToList(),
            "All" => _booksInitial,
            _ => _books
        };
        StateHasChanged();
    }

    void SortByTag(string tag)
    {
        _books = _booksInitial.Where(x => x.Tags.Contains(tag)).ToList();
        StateHasChanged();
    }

    void Search()
    {
        _books = _booksInitial.Where(x => x.Name.ToLower().Contains(serchstring.ToLower()) ||
                                              x.Author.ToLower().Contains(serchstring.ToLower()) ||
                                              x.YearPosted.ToLower().Contains(serchstring.ToLower()) ||
                                              x.Tags.ToLower().Contains(serchstring.ToLower())).ToList();
        StateHasChanged();
    }
}


